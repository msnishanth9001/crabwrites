rust too many features. 

$cargo new sha1_cracker
will create a new project in the folder, sha_1_cracker. Here Cargo by default create a binary project.

to create a library
$ cargo new my_lib --lib

argon2id

entry point is main.rs
standard lib, std
println! is a macro, not a classic function. Rust doesnot support variadic generics yet. It has the advantage of being compile-time evaluated and checked and thus prevent vulnerabilities such as format string vulnerabilities.

Box errors. 
std::error::Error trait.

packages/ libs can be created by any dev and shared online for usage, at https://crates.io. Which is managed by Cargo.

Whenever an object goes out of scope, its destructor is called, and the owned resources are
freed.

This is because Rust is an expression-oriented language. Expressions
evaluate to a value. Their opposites, statements, are instructions that do something and end
with a semicolon (
;
)
Ok(());
is a statement due to the semicolon, and the main function no longer
evaluates to its expected return type:
Result

In read world scenario, we may want to use optimized hash crackers such
as
hashcat
or
John the Ripper
, can use gpu also.


rust compiler is hard at start, like any new learning activity. :/ Enjoy.
I did Ok(); and 

compilation takes ton of time compared to others.
    Updating crates.io index
  Downloaded hex v0.4.3
  Downloaded sha-1 v0.10.1
  Downloaded 2 crates (25.3 KB) in 0.86s
   Compiling typenum v1.16.0
   Compiling version_check v0.9.4
   Compiling libc v0.2.147
   Compiling cfg-if v1.0.0
   Compiling hex v0.4.3
   Compiling generic-array v0.14.7
   Compiling cpufeatures v0.2.9
   Compiling block-buffer v0.10.4
   Compiling crypto-common v0.1.6
   Compiling digest v0.10.7
   Compiling sha-1 v0.10.1
   Compiling sha1_cracker v0.1.0 


Compiling sha1_cracker v0.1.0 (/Users/n.ms/Documents/projects/git/blackhat-tools/sha1_cracker/Ch01/sha1_cracker)
Finished dev [unoptimized + debuginfo] target(s) in 0.86s
Running `/User


perfect mix between an imperative and a functional language


cargo check. instead of cargo build.
Generics add a lot of work to the compiler and
thus significantly increase compile times

 split a large project into smaller crates and benefit from Rustâ€™s
incremental
compilation

Update your local toolchain with, rustup
rustup self update
rustup update

clippy

cargo upate

cargo install -f cargo-outdated
cargo outdated

cargo install -f cargo-audit
cargo audit


cargo run -- wordlist.txt 7c6a61c68ef8b9b6b061b28c348bc1ed7921cb53
cargo run


read about all the different folders here in the project repository. 






































































































































































































